{
	// Place your Back-end workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"CRUD": {
        "prefix": "crud",
        "body": "const db = require(dbConfig);\n\nmodule.exports = {\n  findAll,\n  findById,\n  remove,\n  register,\n  editById,\n  findByUserName\n};\n\nconst table = 'admin';\nfunction findAll() {\n  return db(table);\n}\n\nfunction findById(id) {\n  id = Array.isArray(id) ? [id] : id;\n  return db(table)\n    .where({ id })\n    .first()\n    .then(res => console.log(res))\n    .catch(res => console.log(res));\n}\n\nfunction findByUserName(admin) {\n  if (admin.username) {\n    const username = admin.username;\n    return db(table)\n      .where({ username })\n      .first();\n  }\n}\n\nfunction remove(id) {\n  return db(table)\n    .where({ id })\n    .del();\n}\nfunction editById(id, update) {\n  return db(table)\n    .where({ id })\n    .update(update, '*');\n}\nfunction register(obj) {\n  return db(table)\n    .insert(obj)\n    .then(([id]) => findById(id));\n}\n"
	},
	"ROUTE": {
        "prefix": "route",
        "body": "const router = require('express').Router()\nconst dbModel = require(Model)\nrouter\n  .get('/',(req,res)=>{\n    return dbModel.findAll()\n    .then(p=>{res.status(200).json({message:`SUCCESS`,...p})})\n    .catch(e=>{res.status(404).json({message:'SOMEMESSAGE', ...e})})\n})\nrouter\n  .get('/:id',(req,res)=>{\n    const {id}=req.params\n    return dbModel.findAllById(id)\n    .then(p=>{res.status(200).json({message:`SUCCESS`,...p})})\n    .catch(e=>{res.status(404).json({message:'SOMEMESSAGE', ...e})})\n})\n  \nrouter\n  .post('/',(req,res)=>{\n    const {body}=req\n    return dbModel.add(body)\n    .then(p=>{res.status(201).json({message:`SUCCESS`,...p})})\n    .catch(e=>{res.status(404).json({message:'SOMEMESSAGE', ...e})})\n})\nrouter\n  .put('/:id',(req,res)=>{\n    const {id}=req.params\n    const {body}=req\n  \n    return dbModel.editById(id)\n    .then(p=>{res.status(200).json({message:`SUCCESS`,...p})})\n    .catch(e=>{res.status(404).json({message:'SOMEMESSAGE', ...e})})\n})\nrouter\n  .delete('/:id',(req,res)=>{\n    const {id}=req.params\n    \n    return dbModel.remove(id)\n    .then(p=>{res.status(201).json({message:`SUCCESS`,...p})})\n    .catch(e=>{res.status(404).json({message:'SOMEMESSAGE', ...e})})\n})\nmodule.exports=router\n"
    },
}